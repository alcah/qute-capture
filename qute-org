#!/usr/bin/env python3

"""
Store the given url in an org-mode file
"""

import PyOrgMode as pyorg
import os.path
import argparse
import subprocess
import shlex
import sys
import re

ORG_FILE = os.path.expanduser("~/read-later.org")
HEADING_PATH = "Read Later"
HEADING_SEPERATOR = '/'

argparser = argparse.ArgumentParser(description=__doc__)
argparser.add_argument("mode", nargs='?', choices=["write", "read"])
argparser.add_argument("--title", "-t", nargs='?', default=os.getenv("QUTE_TITLE"))
argparser.add_argument("--content", "-c", nargs='?', default=os.getenv("QUTE_URL"))
argparser.add_argument("--org-file", "-f", default=ORG_FILE)
argparser.add_argument("--heading", "-d", default=HEADING_PATH)
argparser.add_argument("--re", "-r", nargs='?', default="")

def qute_command(command):
    """send commands to qutebrowser"""
    with open(os.environ['QUTE_FIFO'], 'w') as fifo:
        fifo.write(command + '\n')
        fifo.flush

def dmenu(items, invocation):
    """run dmenu"""
    command = shlex.split(invocation)
    process = subprocess.run(command,
                             input='\n'.join(items).encode("UTF-8"),
                             stdout=subprocess.PIPE)
    return process.stdout.decode("UTF-8").strip()

def new_node(heading, level, content=None):
    """Return a new orgnode"""
    node = pyorg.OrgNode.Element()
    node.heading = heading
    node.level = level
    if content:
        node.append_clean(content)
    return node

def resolve_heading(org, headings):
    """
    return the node for the specified subheading from org
    nested subheadings can be specified using `/' e.g. heading/subheading
    create any headings that don't exist
    """
    def subheading(org, heading):
        """return the node for heading immediately below org"""
        for c in org.content:
            if c.heading == heading:
                return c
        return None

    node = org
    for h in headings.split(HEADING_SEPERATOR):
        if subheading(node, h):
            node = subheading(node, h)
        else:
            nnode = new_node(h, node.level + 1)
            node.append_clean(nnode)
            node = nnode
    return node

def main(args):
    """
    Store given url in an org-mode file
    or interactively retrieve using dmenu
    """
    if not args.mode:
        argparser.print_help()
        return 1

    org = pyorg.OrgDataStructure()

    try:
        org.load_from_file(args.org_file);
    except FileNotFoundError:
        # If the file doesn't exist we begin with an empty org structure
        pass

    node = resolve_heading(org.root, args.heading);

    if args.mode == "write":
        newnode = new_node(args.title, node.level + 1, args.content + '\n')
        node.append_clean(newnode)
        org.save_to_file(args.org_file)
        if os.getenv("QUTE_FIFO"):
            qute_command("message-info \"captured " + args.title + "\"")

    elif args.mode == "read":
        if node.content:
            items = ["{} {}".format(e.content[0].strip(),
                                    e.heading.strip()) for e in node.content]

            # ideally we should be matching against every line in content
            # - filter over node content, then convert into dmenu format
            if args.re:
                items = [i for i in items if re.match(args.re, i)]

            selection = dmenu(items, "dmenu -l 15").split(' ')[0]
            if os.getenv("QUTE_FIFO") and selection:
                qute_command("open -t " + selection)
            elif selection:
                print(selection)

    return 0

if __name__ == '__main__':
    sys.exit(main(argparser.parse_args()))
